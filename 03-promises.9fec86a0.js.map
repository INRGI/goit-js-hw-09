{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAeC,SAASC,cAAc,SACtCC,EAAgBF,SAASC,cAAc,uBACvCE,EAAeH,SAASC,cAAc,sBACtCG,EAAiBJ,SAASC,cAAc,wBA8B9C,SAASI,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,KACLH,GACFF,EAAQ,C,SAAEH,E,MAAUC,IAGtBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAC1BA,EAAM,G,CAtCbR,EAAagB,iBAAiB,UAE9B,SAAkBC,GAChBA,EAAMC,iBAEN,IAAIC,EAAQC,OAAOjB,EAAckB,OACjC,MAAMC,EAAOF,OAAOhB,EAAaiB,OAC3BE,EAASH,OAAOf,EAAegB,OACrC,IAAIG,EAAW,EAEf,GAAIL,GAAS,GAAKG,GAAQ,GAAKC,GAAU,EACvC,OAAOE,EAAA3B,GAAS4B,OAAOC,QAAQ,gCAGjC,IAAK,IAAIC,EAAI,EAAGA,GAAKL,EAAQK,IAC3BJ,EAAWI,EACXtB,EAAckB,EAAUL,GACrBU,MAAK,EAACtB,SAAEA,EAAQC,MAAEA,MACjBiB,EAAA3B,GAAS4B,OAAOI,QAAQ,qBAAqBvB,QAAeC,MAAU,IAEvEuB,OAAM,EAACxB,SAAEA,EAAQC,MAAEA,MAClBiB,EAAA3B,GAAS4B,OAAOC,QAAQ,oBAAoBpB,QAAeC,MAAU,IAEzEW,GAASG,EAEXtB,EAAagC,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst formSelector = document.querySelector('.form');\nconst delaySelector = document.querySelector('input[name=\"delay\"]');\nconst stepSelector = document.querySelector('input[name=\"step\"]');\nconst amountSelector = document.querySelector('input[name=\"amount\"]');\n\nformSelector.addEventListener('submit', onSubmit)\n\nfunction onSubmit(event) {\n  event.preventDefault();\n\n  let delay = Number(delaySelector.value);\n  const step = Number(stepSelector.value);\n  const amount = Number(amountSelector.value);\n  let position = 0;\n\n  if (delay <= 0 || step <= 0 || amount <= 0) {\n    return Notiflix.Notify.failure('Please enter a correct value');\n  }\n\n  for (let i = 1; i <= amount; i++){\n    position = i;\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n      });\n    delay += step;\n  };\n  formSelector.reset();\n};\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      }\n\n      reject({ position, delay });\n    }, delay);\n  });\n}\n\n\n\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$formSelector","document","querySelector","$47d4ff9957288465$var$delaySelector","$47d4ff9957288465$var$stepSelector","$47d4ff9957288465$var$amountSelector","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","event","preventDefault","delay1","Number","value","step","amount","position1","$parcel$interopDefault","Notify","failure","i","then","success","catch","reset"],"version":3,"file":"03-promises.9fec86a0.js.map"}